package com.demo.cache.impl;

import com.demo.cache.GuavaCacheService;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheStats;
import com.google.common.collect.ImmutableMap;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

/**
 * @author cxiujin
 * @date 2019/08/27 8:49
 */
@Service
public class GuavaCacheServiceImpl implements GuavaCacheService {

    /**
     * maximumSize: 设置缓存的最大容量
     * expireAfterWrite: 设置缓存在写入多长时间后失效
     * expireAfterAccess: 在多长时间内未访问则过期
     * concurrencyLevel: 设置并发级别为10
     * recordStats: 开启缓存统计
     */
    static Cache<String, Object> cache = CacheBuilder.newBuilder()
            .maximumSize(1000)
            .expireAfterAccess(1800, TimeUnit.MINUTES)
            .concurrencyLevel(10)
            .recordStats()
            .build();


    /**
     * 返回与此缓存中的 key 关联的值，如果 key 没有缓存值，则返回 null
     *
     * @param key
     * @return Object
     */
    @Override
    public Object getIfPresent(String key) {
        return cache.getIfPresent(key);
    }

    /**
     * 如果有缓存则从缓存返回，没有则调用Callable查询放入缓存再返回
     *
     * @param key
     * @param valueLoader
     * @throws ExecutionException          如果在加载值时抛出了已检查的异常
     */
    @Override
    public Object get(String key, Callable valueLoader) throws ExecutionException {
        return cache.get(key, valueLoader);
    }

    /**
     * 返回此缓存中与 keys 关联的值的映射。返回的映射将仅包含缓存中已存在的条目。
     *
     * @param keys
     * @return map
     */
    @Override
    public ImmutableMap<String, Object> getAllPresent(Iterable<String> keys) {
        return cache.getAllPresent(keys);
    }

    /**
     * 在此缓存中将value 与 key 关联。如果缓存先前包含旧值，则旧值将替换为新值 value
     *
     * @param key
     * @param value
     */
    @Override
    public void put(String key, Object value) {
        cache.put(key, value);
    }

    /**
     * 对map中每个元素一一放入缓存
     *
     * @param map Map<Key,Value>
     */
    @Override
    public void putAll(Map<String, Object> map) {
        cache.putAll(map);
    }

    /**
     * 删除key的值
     *
     * @param key
     */
    @Override
    public void invalidate(String key) {
        cache.invalidate(key);
    }

    /**
     * 删除多个key的值
     *
     * @param keys
     */
    @Override
    public void invalidateAll(Iterable<String> keys) {
        cache.invalidateAll(keys);
    }

    /**
     * 清空缓存所有key的值
     */
    @Override
    public void invalidateAll() {
        cache.invalidateAll();
    }

    /**
     * 返回缓存中的近似条目数(key的数量)
     */
    @Override
    public long size() {
        return cache.size();
    }

    /**
     * 返回此缓存的累积统计信息的当前快照。所有统计信息都初始化为零，并且在缓存的生命周期内单调递增
     */
    @Override
    public CacheStats stats() {
        return cache.stats();
    }

    /**
     * 返回存储在此缓存中的条目视图作为线程安全映射。对map所做的修改会直接影响缓存。返回映射中的迭代器至少
     * 是弱一致：它们对于并发使用是安全的，但是如果在创建迭代器之后修改了缓存（包括逐出），那么未定义哪个
     * 更改（如果有）将反映在该迭代器中。
     */
    @Override
    public ConcurrentMap<String, Object> asMap() {
        return cache.asMap();
    }

    /**
     * 执行缓存所需的任何挂起的维护操作。确切地说，执行哪些活动（如果有的话）依赖于实现
     */
    @Override
    public void cleanUp() {
        cache.cleanUp();
    }
}
